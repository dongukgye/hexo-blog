<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Deploy Django project with gunicorn and nginx</title>
      <link href="/deploy-django/"/>
      <url>/deploy-django/</url>
      
        <content type="html"><![CDATA[<h3 id="0-Introduction"><a href="#0-Introduction" class="headerlink" title="#0 Introduction"></a>#0 Introduction</h3><p>In this article, we are going to talk about how to deploy Django project with postgresql, gunicorn and nginx. </p><h3 id="1-Install-packages"><a href="#1-Install-packages" class="headerlink" title="#1 Install packages"></a>#1 Install packages</h3><p>First of all, install all packages we’re going to use with following command.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx -y</span><br></pre></td></tr></table></figure><h3 id="2-Setup-Database"><a href="#2-Setup-Database" class="headerlink" title="#2 Setup Database"></a>#2 Setup Database</h3><p>After the installation, first thing we need to do is start up the database server(in case of the database server doesn’t automatically start up), and access to the posgres prompt to create a database and user for our django project.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db setting</span><br><span class="line">postgres=# CREATE DATABASE db_name;</span><br><span class="line">CREATE DATABASE</span><br><span class="line">postgres=# CREATE USER admin WITH PASSWORD 'password';</span><br><span class="line">CREATE ROLE</span><br><span class="line">postgres=# ALTER ROLE admin SET client_encoding TO 'utf8';</span><br><span class="line">ALTER ROLE</span><br><span class="line">postgres=# ALTER ROLE admin SET default_transaction_isolation TO 'read committed';</span><br><span class="line">ALTER ROLE</span><br><span class="line">postgres=# ALTER ROLE admin SET timezone TO 'UST';</span><br><span class="line">ALTER ROLE</span><br><span class="line">postgres=# GRANT ALL PRIVILEGES ON DATABASE db_name TO admin;</span><br><span class="line">GRANT</span><br><span class="line">postgres=# \q</span><br></pre></td></tr></table></figure><h3 id="3-Setup-Python-environment"><a href="#3-Setup-Python-environment" class="headerlink" title="#3 Setup Python environment"></a>#3 Setup Python environment</h3><p>I prefer to use <code>virtualenvwrapper</code> to manage my python virtualenvs, it easy to use and manage than the original python virtualenv program. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>And then, we need to add following lines to the .bashrc(or the rc file for whatever shell you use) file, feel free to change the paths if needed.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> virtualenvwrapper settings</span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/.local/bin/virtualenv</span><br><span class="line">source $HOME/.local/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><p>Source the .bashrc file or restart your shell. Now we can simply run following commands to create a virtualenv.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkvirtualenv env</span><br></pre></td></tr></table></figure><p>And activate. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> workon env</span><br></pre></td></tr></table></figure><h3 id="4-Setup-Django-project"><a href="#4-Setup-Django-project" class="headerlink" title="#4 Setup Django project"></a>#4 Setup Django project</h3><p>I think we are not going to talk too much detail about how to initiate a Django project, I assume you already have a ready-to-deply Django project, and we’ll focus on how to create different setting modules for production and debug.</p><p>Now, you have only one setting file which is <code>my_project/my_project/settings.py</code>, and we need to change the structure of the setting modules as follows.</p><p>Run following commands in the root directory of your Django project.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd my_project # cd into the directory of settings.py file</span><br><span class="line"><span class="meta">$</span> mkdir settings # make a new directory for setting modules</span><br><span class="line"><span class="meta">$</span> mv settings.py settings/debug.py # move settings.py to settings directory and rename it to debug.py</span><br><span class="line"><span class="meta">$</span> cp settings/debug.py settings/production.py # copy debug.py to production.py</span><br></pre></td></tr></table></figure><p>Now, we have two separate setting modules, and the structure of the setting modules is as follows.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_project/my_project/settings/debug.py</span><br><span class="line">my_project/my_project/settings/production.py</span><br></pre></td></tr></table></figure><p>We’ll leave the debug.py as the current state, and focus only on the production.py. </p><p>First, and the most important setting we need to change is <code>DEBUG</code> option, Django set the <code>DEBUG</code> option to <code>True</code> by default, we need to change it to <code>False</code> in production mode as mentioned in the <a href="https://docs.djangoproject.com/en/3.0/ref/settings/#std:setting-DEBUG" target="_blank" rel="noopener">Django Official Document.</a></p><p>And also read the <code>SECRET_KEY</code> from env vaviable instead of hardcode into setting file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SECRET_KEY = os.environ[<span class="string">'DJANGO_SECRET_KEY'</span>]</span><br></pre></td></tr></table></figure><p>Next, setup the database.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'db_name'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'admin'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'password'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">5432</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Since we’ve changed the path of the setting modules, we also need to change the references to the setting modules. By default, setting module is referenced in two places, <code>manage.py</code> and <code>wsgi.py</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'smartinventory.settings'</span>)</span><br></pre></td></tr></table></figure><p>The code simply checks that if the system env variable <code>DJANGO_SETTINGS_MODULE</code> is exists, if it doesn’t, set it to <code>smartinventory.settings</code> which is the path of default setting module, and here we need to change the path to <code>smartinventory.settings.debug</code>, this allows us to still use the debug settings module when developing.</p><p>And yes, if we set <code>DJANGO_SETTINGS_MODULE</code> env variable to <code>smartinventory.settings.production</code> in our live server, Django will read the productin setting module as default.</p><h3 id="5-Setup-gunicorn"><a href="#5-Setup-gunicorn" class="headerlink" title="#5 Setup gunicorn"></a>#5 Setup gunicorn</h3><p>Install gunicorn with pip.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> pip install gunicorn</span><br></pre></td></tr></table></figure><p>And create a gunicorn service file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/systemd/system/gunicorn.service</span><br></pre></td></tr></table></figure><p>Paste in following content.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=gunicorn daemon</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=username</span><br><span class="line">Group=www-data</span><br><span class="line">WorkingDirectory=/path/to/django/project/root/directory</span><br><span class="line">EnvironmentFile=/path/to/envs/file</span><br><span class="line">ExecStart=/home/username/.virtualenvs/env/bin/gunicorn --access-logfile - --workers 3 --bind unix:/path/to/django/project/root/directory/gunicorn.sock my_project.wsgi:application</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>Note that the <code>EnvironmentFile=/path/to/envs/file</code> option, somehow, gunicorn can’t read the system env variables properly in my ubuntu server, so the fix for this is to create a file containing the env variables and set the <code>EnvironmentFile</code> option in gunicorn service file, and the content of the envs file are as follows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DJANGO_SETTINGS_MODULE=&apos;smartinventory.settings.production&apos;</span><br><span class="line">DJANGO_SECRET_KEY=&apos;txx*zi!vuqgutvg=@2-drm12+erws*e304_baqkb*y*fnu$@82&apos;</span><br></pre></td></tr></table></figure><p>Start and enable gunicorn service.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start gunicorn</span><br><span class="line">$ sudo systemctl enable gunicorn</span><br></pre></td></tr></table></figure><h3 id="6-Setup-nginx"><a href="#6-Setup-nginx" class="headerlink" title="#6 Setup nginx"></a>#6 Setup nginx</h3><p>Since we’ve bind our Django project to a unix socket with gunicorn, the only thing we need to do with nginx is to set a proxy to the unix socket. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        root /path/to/django/project/root/directory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include proxy_params;</span><br><span class="line">        proxy_pass http://unix:/path/to/django/project/root/directory/gunicorn.sock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Last, restart the nginx service.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><p>That’s it, now type the domain name(or IP) in your browser, you should see the index page of your Django project.<br>congratulations! :\</p>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> deploy </tag>
            
            <tag> gunicorn </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to setup nginx server blocks and SSL certificate with Let&#39;s Encrypt</title>
      <link href="/nginx-server-block-and-ssl/"/>
      <url>/nginx-server-block-and-ssl/</url>
      
        <content type="html"><![CDATA[<h3 id="0-Install-nginx"><a href="#0-Install-nginx" class="headerlink" title="#0 Install nginx"></a>#0 Install nginx</h3><p>First of all, let’s install nginx server on our linux. The commands will be vary depends on what distribution you are using, and we’re going to use Ubuntu in this guide.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install nginx -y</span><br></pre></td></tr></table></figure><p>Now we can start nginx service with following commands, and enable it by default.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start nginx</span><br><span class="line">$ sudo systemctl enable nginx</span><br></pre></td></tr></table></figure><p>Now type the IP of the host in the browser, you should see the default nginx index page.</p><h3 id="1-Create-root-directory"><a href="#1-Create-root-directory" class="headerlink" title="#1 Create root directory"></a>#1 Create root directory</h3><p>The two domain names we are going to use in this guide is <em>example.com</em> and <em>demo.com</em> for demonstration purpose, and we’ll create <strong>block config file</strong> for each domain respectively. </p><p>Let’s create two root directories in <code>/var/www/</code> for both of our domains.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># create directories</span><br><span class="line">$ sudo mkdir -p /var/www/example.com/public_html</span><br><span class="line">$ sudo mkdir -p /var/www/demo.com/public_html</span><br><span class="line"></span><br><span class="line"># create index file, put some html code into these files</span><br><span class="line">$ sudo touch /var/www/example.com/public_html/index.html</span><br><span class="line">$ sudo touch /var/www/demo.com/public_html/index.html</span><br><span class="line"></span><br><span class="line"># finally change the ownership of these directories</span><br><span class="line">$ sudo chown -R www-data:www-data /var/www/example.com/</span><br><span class="line">$ sudo chown -R www-data:www-data /var/www/demo.com/</span><br></pre></td></tr></table></figure><p>You should put some html contents into the both index files to recognize each site when testing, we’re not going to cover such details.</p><h3 id="2-Create-server-block-config-file"><a href="#2-Create-server-block-config-file" class="headerlink" title="#2 Create server block config file"></a>#2 Create server block config file</h3><p>Now it’s time to create nginx server block config files, just copy nginx default server block config file for each domain. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/example.com</span><br><span class="line"><span class="meta">$</span> sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/demo.com</span><br></pre></td></tr></table></figure><p>At the end of the <code>/etc/nginx/sites-available/example.com</code> file, you should see a server block for <em>exmaple.com</em> which commented out by default, we’re going to use this block for our sites. Uncomment the said block by removing the # of each line and delete all other content, also we need to change the root directory to the directory we created above and include ssl config file. The block will finally looks like this. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">listen [::]:80;</span><br><span class="line"></span><br><span class="line">listen 443 ssl; # listen to https request</span><br><span class="line">listen [::]:443 ssl;</span><br><span class="line">include snippets/example-ssl.conf;# include ssl config file</span><br><span class="line"></span><br><span class="line">server_name example.com;</span><br><span class="line"></span><br><span class="line">root /var/www/example.com/public_html; # set root directory</span><br><span class="line">index index.html;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">try_files $uri $uri/ =404;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And this is <code>/etc/nginx/sites-available/example.com</code> for domain <em>demo.com</em>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">listen [::]:80;</span><br><span class="line"></span><br><span class="line">listen 443 ssl;</span><br><span class="line">listen [::]:443 ssl;</span><br><span class="line">include snippets/demo-ssl.conf;</span><br><span class="line"></span><br><span class="line">server_name demo.com;</span><br><span class="line"></span><br><span class="line">root /var/www/demo.com/public_html;</span><br><span class="line">index index.html;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">try_files $uri $uri/ =404;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Setup-SSL-certificate"><a href="#3-Setup-SSL-certificate" class="headerlink" title="#3 Setup SSL certificate"></a>#3 Setup SSL certificate</h3><p>We’ve specified the SSL certificate path for our domain, but we don’t have the actual SSL certificate in the path yet.</p><p>First, we need to install <strong>certbot</strong> package to create SSL certificate.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install python-certbot-nginx -y</span><br></pre></td></tr></table></figure><p>And create SSL certificate with <strong>certbot</strong> is simple, just specify the <code>-d</code> option for both of our domains.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ certbot --nginx -d example.com -d demo.com</span><br></pre></td></tr></table></figure><p>Now let’s create the SSL config files which we included in the server block config file in the last section. In these SSL config files, we are going to set the path of SSL certificate and associated private key.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/nginx/snippets/snakeoil.conf /etc/nginx/snippets/example-ssl.conf</span><br><span class="line">$ cp /etc/nginx/snippets/snakeoil.conf /etc/nginx/snippets/demo-ssl.conf</span><br></pre></td></tr></table></figure><p>By copying the default SSL config file created by nginx, the files should looks like this at the moment.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Self signed certificates generated by the ssl-cert package</span><br><span class="line"># Don&apos;t use them in a production server!</span><br><span class="line"></span><br><span class="line">ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;</span><br><span class="line">ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;</span><br></pre></td></tr></table></figure><p>We need to change the path of certificate and private key, the certificates we installed for our sites are in the following directory.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/letsencrypt/live/&lt;domain_name&gt;</span><br></pre></td></tr></table></figure><p>Change the path for each SSL config file. so they finally looks like below.<br><code>/etc/nginx/snippets/example-ssl.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Self signed certificates generated by the ssl-cert package</span><br><span class="line"># Don&apos;t use them in a production server!</span><br><span class="line"></span><br><span class="line">ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br></pre></td></tr></table></figure><p><code>/etc/nginx/snippets/demo-ssl.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Self signed certificates generated by the ssl-cert package</span><br><span class="line"># Don&apos;t use them in a production server!</span><br><span class="line"></span><br><span class="line">ssl_certificate /etc/letsencrypt/live/demo.com/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/demo.com/privkey.pem;</span><br></pre></td></tr></table></figure><p>It’s time to test our sites and see if they are configed properly.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> test the config file</span><br><span class="line"><span class="meta">$</span> sudo nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> restart nginx server</span><br><span class="line"><span class="meta">$</span> sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><p>Yeah, we’re done. now check out each of your domains in the browser, you are expected to see the different content of each site(if you’ve put some html code in to the index file).</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>I’ve wrote this guide since I can’t find any tutorial for both nginx server block setup and SSL certificate setup, hope it can help someone. </p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
            <tag> server block </tag>
            
            <tag> ssl </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
